/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'maven-publish'
    id('com.tutorial.license')
    id 'myproject.java-conventions'
    id("java-library")
}

project.description = 'app project description'

// Apply any other configurations specific to your project

// Use the build script defined in buildSrc
apply from: rootProject.file('/buildSrc/shared.gradle')


// Use the custom task defined in buildSrc
tasks.register('myCustomTask', MyCustomTask)

//repositories {
    // Use Maven Central for resolving dependencies.
//    mavenCentral()
//    maven {
//        url 'https://maven.aliyun.com/repository/public'
//    }
//}

dependencies {
    // This dependency is used by the application.
//    implementation 'com.google.guava:guava:32.1.1-jre'
    implementation(platform(project(':platform')))
    implementation group: 'org.apache.commons', name: 'commons-lang3'

    implementation(project(':lib'))


}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.9.3')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'gradle.tutorial.AppMain'
}

publishing {
    publications {
        create("maven", MavenPublication) {
            groupId = "com.gradle.tutorial"
            artifactId = "tutorial"
            version = "1.0"

            from(components["java"])
        }
    }
}

tasks.register('hello') {
    doLast {
        println 'Hello Earth'
    }
}
tasks.named('hello') {
    doFirst {
        println 'Hello Venus'
    }
}
tasks.named('hello') {
    doFirst {
        println 'Hello Mercury'
    }
}
tasks.named('hello') {
    doLast {
        println 'Hello Mars'
    }
}
tasks.named('hello') {
    doLast {
        println 'Hello Jupiter'
    }
}

tasks.register('testBoth') {

    group = "Custom"

    description = "A lovely greeting task"

    doFirst {
        println 'This is executed first during the execution phase.'
    }


    doLast {
        println 'This is executed last during the execution phase.'
    }
    println 'This is executed during the configuration phase as well, because :testBoth is used in the build.'

    dependsOn 'hello'
}

println 'This is executed during the configuration phase.|project.name:' + project.name + '|project.path:' + path


